{"ast":null,"code":"// import jwt_decode from 'jwt-decode';\n// import jwt_decode from 'jwt-decode';\nimport jwt_decode from 'jwt-decode';\n// import { decode } from 'jwt-decode';\nimport { GlobalConstant } from '../shared/global-constant';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./auth.service\";\nimport * as i3 from \"./snackbar.service\";\nexport let RouteGuardService = /*#__PURE__*/(() => {\n  class RouteGuardService {\n    constructor(router, authService, snackbarServcie) {\n      this.router = router;\n      this.authService = authService;\n      this.snackbarServcie = snackbarServcie;\n    }\n    canActive(route) {\n      let expectedRoleArray = route.data;\n      expectedRoleArray = expectedRoleArray.expectedRole;\n      const token = localStorage.getItem('accessToken');\n      var tokenPayoad;\n      try {\n        tokenPayoad = jwt_decode(token);\n      } catch (err) {\n        localStorage.clear();\n        this.router.navigate(['/']);\n      }\n      let checkRole = false;\n      for (let i = 0; i < expectedRoleArray.legth; i++) {\n        if (expectedRoleArray[i] == tokenPayoad.role) {\n          checkRole = true;\n        }\n      }\n      if (tokenPayoad.role == 'user' || tokenPayoad.role == 'admin') {\n        if (this.authService.isAuthenticated() && checkRole) {\n          return true;\n        }\n        this.snackbarServcie.openSnackBar(GlobalConstant.unauthorized, GlobalConstant.error);\n        this.router.navigate(['cafe/dashboard']);\n        return false;\n      } else {\n        this.router.navigate(['/']);\n        localStorage.clear();\n        return false;\n      }\n    }\n  }\n  RouteGuardService.ɵfac = function RouteGuardService_Factory(t) {\n    return new (t || RouteGuardService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.SnackbarService));\n  };\n  RouteGuardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RouteGuardService,\n    factory: RouteGuardService.ɵfac,\n    providedIn: 'root'\n  });\n  return RouteGuardService;\n})();","map":null,"metadata":{},"sourceType":"module"}